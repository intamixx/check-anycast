#!/bin/sh
# $Id: monitor.anycast
# *** Please make sure script is installed after anycast ranges for server have been set ***

PATH=/sbin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin
SELF=$(basename $0)
declare -a CANARY_DOMAINS=("US.COM" "CENTRALNIC.NET" "XYZ")
ADDR="ops@soc.com,$(dig +short TXT emergency.soc.com | tr -d '\"')"

usage()
{
        cat <<END

Usage: $0 [options]
Tests for anycast servers

Options:
  -v       generate output for every individual test case
  -s       stop running tests after the first failure
  -h       show brief usage information and exit

END
}

while getopts "vsh" OPT; do
        case "$OPT" in
        v)
                DEBUG=1
                ;;
        s)
                STOP=1
                ;;
        h)
                usage
                exit 0
                ;;
        ?)
                exit 1
        esac
done
shift $((OPTIND - 1))


_indent=$'\n\t' # local format helper

_assert_reset() {
    tests_ran=0
    tests_failed=0
    tests_errors=()
    tests_starttime="$(date +%s%N)" # nanoseconds_since_epoch
}

assert_end() {
    # assert_end [suite ..]
    tests_endtime="$(date +%s%N)"
    # required visible decimal place for seconds (leading zeros if needed)
    local tests_time="$( \
        printf "%010d" "$(( ${tests_endtime/%N/000000000} 
                            - ${tests_starttime/%N/000000000} ))")"  # in ns
    tests="$tests_ran ${*:+$* }tests"
    [[ -n "$DEBUG" ]] && echo

    report_time=" in ${tests_time:0:${#tests_time}-9}.${tests_time:${#tests_time}-9:3}s" || report_time=

    if [[ "$tests_failed" -eq 0 ]]; then
        echo "all $tests passed$report_time."
    else
        for error in "${tests_errors[@]}"; do echo "$error"; done
        echo "$tests_failed of $tests failed$report_time."
    fi
    tests_failed_previous=$tests_failed
    [[ $tests_failed -gt 0 ]] && tests_suite_status=1
}

assert() {
    # assert <command> <expected stdout> [stdin]
    (( tests_ran++ )) || :
    expected=$(echo -ne "${2:-}")
    result="$(eval 2>/dev/null $1 <<< ${3:-})" || true
    if [[ "$result" == "$expected" ]]; then
        [[ -z "$DEBUG" ]] || echo -n .
        return
    fi
    result="$(sed -e :a -e '$!N;s/\n/\\n/;ta' <<< "$result")"
    [[ -z "$result" ]] && result="nothing" || result="\"$result\""
    [[ -z "$2" ]] && expected="nothing" || expected="\"$2\""
    _assert_fail "expected $expected${_indent}got $result" "$1" "$3"
}

assert_raises() {
    # assert_raises <command> <expected code> [stdin]
    (( tests_ran++ )) || :
    status=0
    (eval $1 <<< ${3:-}) > /dev/null 2>&1 || status=$?
    expected=${2:-0}
    if [[ "$status" -eq "$expected" ]]; then
        [[ -z "$DEBUG" ]] || echo -n .
        return
    fi
    _assert_fail "program terminated with code $status instead of $expected" "$1" "$3"
}

_assert_fail() {
    # _assert_fail <failure> <command> <stdin>
    [[ -n "$DEBUG" ]] && echo -n X
    report="test #$tests_ran \"$2${3:+ <<< $3}\" failed:${_indent}$1"
    if [[ -n "$STOP" ]]; then
        [[ -n "$DEBUG" ]] && echo
        echo "$report"
        exit 1
    fi
    tests_errors[$tests_failed]="$report"
    (( tests_failed++ )) || :
}


_assert_reset
: ${tests_suite_status:=0}  # remember if any of the tests failed so far
_assert_cleanup() {
    local status=$?
    # modify exit code if it's not already non-zero
    [[ $status -eq 0 ]] && exit $tests_suite_status
}

function runningstatus() {
case "$(pidof $1 | wc -w)" in

0)  status=0
    ;;
1)  status=1
    ;;
esac
}

function StopBGP()
{
        LINES=`[ -n "$OUTPUT" ] && echo "$OUTPUT" | wc -l || echo 0`
        logger -t $SELF "Queried SOA for $CANARY_DOMAIN on $CANARY_IP: $LINES Lines Received. $OUTPUT: Error occurred"
        logger -t $SELF $(/sbin/service bgpd stop)
        logger -t $SELF $(/sbin/service zebra stop)

        logger -t "Sending email report to $ADDR"
        echo "$SELF queried for the SOA for $CANARY_DOMAIN ON $(hostname) and received incorrect response, so the quagga service was stopped." | mailx -s "DNS issue on $(hostname) " $ADDR
        exit 1
}

trap _assert_cleanup EXIT
###########################
# Main Script

# Checking services are running
        runningstatus bgpd
        [[ $status == 0 ]] && echo "bgpd not running" && exit;

IPS=$(ip addr show | awk '$1 == "inet" {gsub(/\/.*$/, "", $2); print $2}')

if [[ "$IPS" =~ "194.169.218." ]]; then
        # Server on 'A' Cloud
        CANARY_IP="194.169.218.10"
elif [[ "$IPS" =~ "185.24.64." ]]; then
        # Server on 'B' Cloud
        CANARY_IP="185.24.64.10"
else
        CANARY_IP="Unknown"
        logger -t  $SELF "No anycast IPs configured"
        StopBGP
fi

[[ -n "$DEBUG" ]] && echo "----------------------"
[[ -n "$DEBUG" ]] && echo "Nameserver Exit Code"
[[ -n "$DEBUG" ]] && echo "----------------------"

# Check Nameserver exit code, this check we MUST pass, only one fail allowed
assert_raises "dig +tcp +time=3 +tries=3 +noall +answer SOA ${CANARY_DOMAINS[0]} @$CANARY_IP" "0"
assert_end anycast_exit_code
        if [[ "$tests_failed" -ne 0 ]]; then
                CANARY_DOMAIN=${CANARY_DOMAINS[0]}
                OUTPUT=${tests_errors[@]}
                StopBGP
        fi

_assert_reset

[[ -n "$DEBUG" ]] && echo "----------------------"
[[ -n "$DEBUG" ]] && echo "Nameserver Zone Checks"
[[ -n "$DEBUG" ]] && echo "----------------------"

# Check Nameserver against 3 domains, Pass rate 1/3
for CANARY_DOMAIN in ${CANARY_DOMAINS[@]}; do
        assert "dig +tcp +time=3 +tries=3 +noall +answer SOA $CANARY_DOMAIN @$CANARY_IP | cut -f 1" "$CANARY_DOMAIN."
done
assert_end anycast_zone_check

        # All tests must fail to shutdown bgp
        if [[ "$tests_failed" -eq "$tests_ran" ]]; then
                CANARY_DOMAIN=${CANARY_DOMAINS[@]}
                OUTPUT=${tests_errors[@]}
                StopBGP
        fi

_assert_reset
